###############################################################################
#                          IMPORTS E CONFIGURA√á√ïES
###############################################################################

import streamlit as st
import sqlite3
import json
import pandas as pd
import time as time

import streamlit as st
import sqlite3
import json
import pandas as pd
import time as time

# -----------------------------------------------------------------------------
#                     Verifica√ß√£o de Login e Configura√ß√µes de P√°gina
# -----------------------------------------------------------------------------
if "usuario_logado" not in st.session_state or not st.session_state["usuario_logado"]:
    st.warning("üîí Acesso negado! Fa√ßa login.")
    st.stop()

st.set_page_config(
    page_title="Cadastro de Regras de Neg√≥cio",
    page_icon=":infinity:",
    layout="wide"
)

# CSS Customizado para modais
st.markdown("""
    <style>
        div[data-modal-container='true'] {
            z-index: 1002 !important;
        }
        .stDataEditor div[data-testid="stVerticalBlock"] {
            gap: 0.2rem;
        }
    </style>
""", unsafe_allow_html=True)

# Caminho do banco de dados
DB_PATH = "database/app_data.db"


# -----------------------------------------------------------------------------
#                          FUN√á√ïES AUXILIARES / CACHED
# -----------------------------------------------------------------------------
@st.cache_data
def get_iniciativas_usuario(perfil: str, setor: str) -> pd.DataFrame:
    """
    Retorna as iniciativas dispon√≠veis para o usu√°rio,
    filtradas por perfil e setor, se n√£o for 'admin'.
    """
    conn = sqlite3.connect(DB_PATH)
    query = "SELECT id_iniciativa, nome_iniciativa FROM td_iniciativas"
    if perfil != "admin":
        query += """
            WHERE id_iniciativa IN (
               SELECT id_iniciativa 
               FROM tf_cadastros_iniciativas 
               WHERE id_demandante = (
                  SELECT id_demandante FROM td_demandantes WHERE nome_demandante = ?
               )
            )
        """
        iniciativas = pd.read_sql_query(query, conn, params=[setor])
    else:
        iniciativas = pd.read_sql_query(query, conn)
    conn.close()
    return iniciativas


@st.cache_data
def carregar_dados_iniciativa(id_iniciativa: int) -> dict | None:
    """
    Carrega a √∫ltima linha de tf_cadastro_regras_negocio para a iniciativa dada.
    Retorna um dicion√°rio com as colunas esperadas ou None se n√£o existir.
    """
    conn = sqlite3.connect(DB_PATH)
    query = """
        SELECT *
        FROM tf_cadastro_regras_negocio
        WHERE id_iniciativa = ?
        ORDER BY data_hora DESC
        LIMIT 1
    """
    df = pd.read_sql_query(query, conn, params=[id_iniciativa])
    conn.close()

    if df.empty:
        return None

    row = df.iloc[0]

    # Eixos tem√°ticos salvos em JSON
    try:
        eixos_tematicos = json.loads(row["eixos_tematicos"]) if row["eixos_tematicos"] else []
    except:
        eixos_tematicos = []

    # Demais informa√ß√µes salvas em JSON
    info_json = row.get("demais_informacoes", "") or ""
    try:
        info_dict = json.loads(info_json) if info_json else {}
    except:
        info_dict = {}

    return {
        "objetivo_geral":      row["objetivo_geral"],
        "objetivos_especificso": row["objetivos_especificos"],
        "eixos_tematicos":     row["eixos_tematicos"],
        "introducao":          row.get("introducao", ""),
        "justificativa":       row.get("justificativa", ""),
        "metodologia":         row.get("metodologia", ""),
        "demais_informacoes":  info_dict
    }


@st.cache_data
def carregar_resumo_iniciativa(setor: str) -> pd.DataFrame | None:
    """
    Carrega o resumo a partir de td_dados_resumos_sei, filtrando por 'demandante' = setor.
    Retorna um DataFrame ou None se vazio.
    """
    conn = sqlite3.connect(DB_PATH)
    query = "SELECT * FROM td_dados_resumos_sei WHERE demandante = ?"
    df = pd.read_sql_query(query, conn, params=[setor])
    conn.close()
    if df.empty:
        return None
    return df


def salvar_dados_iniciativa(
    id_iniciativa: int,
    usuario: str,
    objetivo_geral: str,
    objetivos_especificos: list[str],
    eixos_tematicos: list[dict],
    introducao: str,
    justificativa: str,
    metodologia: str,
    demais_informacoes: dict
):
    """
    Salva registro na tf_cadastro_regras_negocio, mantendo hist√≥rico m√°ximo de 3 registros.

    - objetivos_especificos: lista de strings
    - eixos_tematicos: lista de dicts
    - demais_informacoes: dict de informa√ß√µes complementares

    Tamb√©m atualiza as colunas "acoes_manejo" e "insumos" com base nos eixos.
    """
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # Limite de 3 hist√≥ricos por iniciativa
    cursor.execute("""
        SELECT COUNT(*)
        FROM tf_cadastro_regras_negocio
        WHERE id_iniciativa = ?
    """, (id_iniciativa,))
    total_reg = cursor.fetchone()[0]
    if total_reg >= 3:
        cursor.execute("""
            DELETE FROM tf_cadastro_regras_negocio
            WHERE id IN (
                SELECT id
                FROM tf_cadastro_regras_negocio
                WHERE id_iniciativa = ?
                ORDER BY data_hora ASC
                LIMIT 1
            )
        """, (id_iniciativa,))

    # Converte listas/dicts para JSON
    objetivos_json = json.dumps(objetivos_especificos or [])
    eixos_json     = json.dumps(eixos_tematicos or [])

    # Extrai lista de acoes e insumos a partir de eixos
    acoes_set   = set()
    insumos_set = set()
    for eixo in eixos_tematicos:
        for ac_id, ac_data in eixo.get("acoes_manejo", {}).items():
            acoes_set.add(ac_id)
            for ins_id in ac_data.get("insumos", []):
                insumos_set.add(ins_id)

    acoes_json  = json.dumps(list(acoes_set))
    insumos_json = json.dumps(list(insumos_set))

    # Regra consolidada
    final_rule = {
        "objetivo_geral": objetivo_geral,
        "objetivos_especificos": objetivos_especificos,
        "eixos_tematicos": eixos_tematicos,
        "acoes": list(acoes_set),
        "insumos": list(insumos_set)
    }
    regra_json = json.dumps(final_rule)

    # Converte o dicion√°rio 'demais_informacoes' em JSON
    demais_info_json = json.dumps(demais_informacoes) if demais_informacoes else "{}"

    # Insere no banco
    cursor.execute("""
        INSERT INTO tf_cadastro_regras_negocio (
            id_iniciativa,
            usuario,
            objetivo_geral,
            objetivos_especificos,
            eixos_tematicos,
            acoes_manejo,
            insumos,
            regra,
            introducao,
            justificativa,
            metodologia,
            demais_informacoes
        )
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        id_iniciativa,
        usuario,
        objetivo_geral,
        objetivos_json,
        eixos_json,
        acoes_json,
        insumos_json,
        regra_json,
        introducao,
        justificativa,
        metodologia,
        demais_info_json
    ))

    conn.commit()
    conn.close()


@st.cache_data
def get_options_from_table(
    table_name: str,
    id_col: str,
    name_col: str,
    filter_col: str | None = None,
    filter_val: str | None = None
) -> dict[str, str]:
    """
    L√™ da tabela `table_name` as colunas `id_col` e `name_col`.
    Opcionalmente filtra por `filter_col = filter_val`.
    Retorna um dict { id_val: name_val }.
    """
    conn = sqlite3.connect(DB_PATH)
    query = f"SELECT {id_col}, {name_col} FROM {table_name}"
    params = ()
    if filter_col and filter_val is not None:
        query += f" WHERE {filter_col} = ?"
        params = (str(filter_val),)

    df = pd.read_sql_query(query, conn, params=params)
    conn.close()

    return {str(row[id_col]): row[name_col] for _, row in df.iterrows()}


# -----------------------------------------------------------------------------
#            Inicializa√ß√£o para evitar KeyError no session_state
# -----------------------------------------------------------------------------

for key in ["introducao", "justificativa", "metodologia", "objetivo_geral"]:
    if key not in st.session_state:
        st.session_state[key] = ""

if "demais_informacoes" not in st.session_state:
    st.session_state["demais_informacoes"] = {}

if "objetivos_especificos" not in st.session_state:
    st.session_state["objetivos_especificos"] = []

if "eixos_tematicos" not in st.session_state:
    st.session_state["eixos_tematicos"] = []

if "df_uc_editado" not in st.session_state:
    st.session_state["df_uc_editado"] = pd.DataFrame()

if "insumos" not in st.session_state:
    st.session_state["insumos"] = {}




# -----------------------------------------------------------------------------
#          Fun√ß√£o para exibir informa√ß√µes complementares na barra lateral
# -----------------------------------------------------------------------------
def exibir_info_lateral(id_iniciativa: int):
    """Exibe no sidebar informa√ß√µes complementares da iniciativa."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    st.sidebar.write("### Informa√ß√µes da Iniciativa")

    # 1) tf_cadastros_iniciativas + demandante
    query_inic = """
    SELECT ci.id_demandante,
           COUNT(DISTINCT ci.cnuc) AS num_unidades,
           d.nome_demandante
    FROM tf_cadastros_iniciativas ci
    JOIN td_demandantes d ON ci.id_demandante = d.id_demandante
    WHERE ci.id_iniciativa = ?
    GROUP BY ci.id_demandante
    """
    row_inic = cursor.execute(query_inic, (id_iniciativa,)).fetchone()
    if row_inic:
        _, num_unidades, nome_demandante = row_inic
        st.sidebar.write(f"**Demandante:** {nome_demandante}")
        st.sidebar.write(f"**N√∫mero de Unidades:** {num_unidades}")
    else:
        st.sidebar.info("Iniciativa n√£o encontrada em tf_cadastros_iniciativas.")

    # 2) td_dados_resumos_sei
    row_resumo = cursor.execute("""
        SELECT diretoria, coordena√ß√£o_geral, coordena√ß√£o
        FROM td_dados_resumos_sei
        WHERE id_resumo = ?
        LIMIT 1
    """, (id_iniciativa,)).fetchone()
    if row_resumo:
        dir_, coord_geral, coord_ = row_resumo
        st.sidebar.write(f"**Diretoria:** {dir_ if dir_ else 'sem informa√ß√£o'}")
        st.sidebar.write(f"**Coord. Geral:** {coord_geral if coord_geral else 'sem informa√ß√£o'}")
        st.sidebar.write(f"**Coordena√ß√£o:** {coord_ if coord_ else 'sem informa√ß√£o'}")
    else:
        st.sidebar.info("Sem resumo SEI cadastrado para esta iniciativa.")

    # 3) Eixos existentes (√∫ltimo registro)
    row_eixos = cursor.execute("""
        SELECT eixos_tematicos
        FROM tf_cadastro_regras_negocio
        WHERE id_iniciativa = ?
        ORDER BY data_hora DESC
        LIMIT 1
    """, (id_iniciativa,)).fetchone()

    conn.close()

    if row_eixos:
        eixos_tematicos_json = row_eixos[0]
        if eixos_tematicos_json:
            eixos_list = json.loads(eixos_tematicos_json)
            nomes = [e.get("nome_eixo", "Eixo Sem Nome") for e in eixos_list]
            st.sidebar.pills(
                "Eixos Tem√°ticos gravados:",
                options=nomes,
                default=None,
                disabled=True
            )
        else:
            st.sidebar.info("Nenhum eixo tem√°tico cadastrado no momento.")
    else:
        st.sidebar.info("Nenhum eixo tem√°tico cadastrado.")


# -----------------------------------------------------------------------------
#                           In√≠cio da P√°gina
# -----------------------------------------------------------------------------
st.subheader("üìù Cadastro de Regras de Neg√≥cio")

perfil      = st.session_state["perfil"]
setor       = st.session_state["setor"]
cpf_usuario = st.session_state["cpf"]

# 1) Seleciona Iniciativa do usu√°rio
iniciativas = get_iniciativas_usuario(perfil, setor)
if iniciativas.empty:
    st.warning("üö´ Nenhuma iniciativa dispon√≠vel para voc√™.")
    st.stop()

nova_iniciativa = st.selectbox(
    "Selecione a Iniciativa:",
    options=iniciativas["id_iniciativa"],
    format_func=lambda x: iniciativas.set_index("id_iniciativa").loc[x, "nome_iniciativa"],
    key="sel_iniciativa"
)

st.caption("‚ÑπÔ∏è Informa√ß√µes Originais do Resumo Executivo de Iniciativas dispon√≠veis no final da p√°gina", help="ref.: documentos SEI")

# 2) Carregamento inicial da iniciativa se mudou
if "carregou_iniciativa" not in st.session_state or st.session_state["carregou_iniciativa"] != nova_iniciativa:
    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # 1Ô∏è‚É£ BUSCA DADOS NA TABELA PRINCIPAL PRIMEIRO (tf_cadastro_regras_negocio)
    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    conn = sqlite3.connect(DB_PATH)
    query = """
        SELECT objetivo_geral, objetivos_especificos, eixos_tematicos,
               introducao, justificativa, metodologia, demais_informacoes
        FROM tf_cadastro_regras_negocio
        WHERE id_iniciativa = ?
        ORDER BY data_hora DESC
        LIMIT 1
    """
    dados_iniciativa = pd.read_sql_query(query, conn, params=[nova_iniciativa])
    conn.close()

    if not dados_iniciativa.empty:
        row = dados_iniciativa.iloc[0]

        # Objetivos Espec√≠ficos: Sempre carrega do banco primeiro
        try:
            objetivos_especificos = json.loads(row["objetivos_especificos"]) if row["objetivos_especificos"] else []
        except:
            objetivos_especificos = []

        st.session_state["objetivo_geral"] = row["objetivo_geral"]
        st.session_state["objetivos_especificos"] = objetivos_especificos

        # Eixos Tem√°ticos
        try:
            st.session_state["eixos_tematicos"] = json.loads(row["eixos_tematicos"]) if row["eixos_tematicos"] else []
        except:
            st.session_state["eixos_tematicos"] = []

        # Textos
        st.session_state["introducao"] = row["introducao"]
        st.session_state["justificativa"] = row["justificativa"]
        st.session_state["metodologia"] = row["metodologia"]

        # Demais informa√ß√µes
        try:
            st.session_state["demais_informacoes"] = json.loads(row["demais_informacoes"]) if row["demais_informacoes"] else {}
        except:
            st.session_state["demais_informacoes"] = {}

    else:
        # Se n√£o houver dados em `tf_cadastro_regras_negocio`, inicia com valores vazios
        st.session_state["objetivo_geral"] = ""
        st.session_state["objetivos_especificos"] = []
        st.session_state["eixos_tematicos"] = []
        st.session_state["introducao"] = ""
        st.session_state["justificativa"] = ""
        st.session_state["metodologia"] = ""
        st.session_state["demais_informacoes"] = {}

        # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        # 2Ô∏è‚É£ FALLBACK: BUSCA DADOS NO RESUMO (td_dados_resumos_sei) APENAS SE O PRINCIPAL ESTIVER VAZIO
        # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        if not st.session_state["objetivo_geral"]:
            conn = sqlite3.connect(DB_PATH)
            row_fallback = conn.execute("""
                SELECT objetivo_geral FROM td_dados_resumos_sei
                WHERE id_resumo = ? LIMIT 1
            """, (nova_iniciativa,)).fetchone()
            conn.close()

            if row_fallback:
                obj_geral_sei = row_fallback[0] or ""
                if obj_geral_sei:
                    st.session_state["objetivo_geral"] = obj_geral_sei

        if not st.session_state["introducao"] or not st.session_state["justificativa"] or not st.session_state["metodologia"]:
            conn = sqlite3.connect(DB_PATH)
            row_resumo_2 = conn.execute("""
                SELECT introdu√ß√£o, justificativa, metodologia
                FROM td_dados_resumos_sei
                WHERE id_resumo = ?
                LIMIT 1
            """, (nova_iniciativa,)).fetchone()
            conn.close()

            if row_resumo_2:
                intro_sei, justif_sei, metod_sei = row_resumo_2

                if not st.session_state["introducao"] and intro_sei:
                    st.session_state["introducao"] = intro_sei
                if not st.session_state["justificativa"] and justif_sei:
                    st.session_state["justificativa"] = justif_sei
                if not st.session_state["metodologia"] and metod_sei:
                    st.session_state["metodologia"] = metod_sei

    # 3Ô∏è‚É£ Finaliza o carregamento
    st.session_state["carregou_iniciativa"] = nova_iniciativa



# Exibe na barra lateral (checkbox)
if st.sidebar.checkbox("Exibir informa√ß√µes da iniciativa", value=True):
    exibir_info_lateral(nova_iniciativa)

st.divider()

st.write(f"**Iniciativa Selecionada:** {iniciativas.set_index('id_iniciativa').loc[nova_iniciativa, 'nome_iniciativa']}")



# ---------------------------------------------------------
#  TABS: Introdu√ß√£o / Objetivos / Justificativa / Metodologia
#        e a aba para Demais Informa√ß√µes
# ---------------------------------------------------------
tab_intro, tab_obj, tab_justif, tab_metod, tab_demandante, tab_eixos, tab_insumos, tab_uc  = st.tabs([
    "Introdu√ß√£o",
    "Objetivos",
    "Justificativa",
    "Metodologia",
    "Demandante",
    "Eixos Tem√°ticos",
    "Insumos",
    "Unidades de Conserva√ß√£o"
])


with st.form("form_textos_resumo"):

    # ---------------------------------------------------------
    # 1) OBJETIVOS
    # (aba separada, pois tem seu pr√≥prio form para atualizar
    #  objetivos espec√≠ficos)
    # ---------------------------------------------------------
    with tab_obj:
        st.subheader("Objetivo Geral")
        st.session_state["objetivo_geral"] = st.text_area(
            "Descreva o Objetivo Geral:",
            value=st.session_state["objetivo_geral"],
            height=140
        )

        st.subheader("Objetivos Espec√≠ficos")

        # Se n√£o existir, inicializa a lista de objetivos em session_state
        if "objetivos_especificos" not in st.session_state:
            st.session_state["objetivos_especificos"] = []

        # 1) Campo e bot√£o para adicionar NOVO objetivo (acima da lista)
        def adicionar_objetivo_callback():
            texto_novo = st.session_state.txt_novo_objetivo.strip()
            if texto_novo:
                st.session_state["objetivos_especificos"].append(texto_novo)
                st.session_state.txt_novo_objetivo = ""  # limpa a caixa ap√≥s adicionar
            else:
                st.warning("O texto do objetivo est√° vazio. Por favor, digite algo antes de adicionar.")

        st.text_area(
            label="Digite o texto do objetivo espec√≠fico a ser adicionado e clique no bot√£o:",
            key="txt_novo_objetivo",
            height=80
        )

        st.button(
            label="Adicionar Objetivo",
            on_click=adicionar_objetivo_callback
        )

        st.write("---")

        # 2) Agora exibimos a lista (simulando uma tabela) com Editar/Remover
        st.write("### Objetivos j√° adicionados:")

        # Cabe√ßalho tipo tabela
        col1, col2, col3 = st.columns([1, 6, 3])
        col1.write("**#**")
        col2.write("**Objetivo**")
        col3.write("*Edi√ß√£o e Exclus√£o*")

        # Loop para cada objetivo adicionado
        for i, objetivo in enumerate(st.session_state["objetivos_especificos"]):
            # Criamos uma nova linha em colunas
            c1, c2, c3 = st.columns([1, 6, 3])
            c1.write(f"{i + 1}")
            c2.write(objetivo)  # exibe o texto do objetivo

            # Na terceira coluna, colocamos bot√µes: Editar (via popover) e Remover
            with c3:
                col_edit, col_remove = st.columns([1, 1])
                with col_edit:
                    # 2.1) Bot√£o/Popover de Edi√ß√£o
                    with st.popover(label=f"‚úèÔ∏è"):
                        st.subheader(f"Editar Objetivo {i+1}")
                        novo_texto = st.text_area("Texto do objetivo:", objetivo, key=f"edit_obj_{i}")
                        if st.button("Salvar Edi√ß√£o", key=f"btn_save_edit_{i}"):
                            st.session_state["objetivos_especificos"][i] = novo_texto
                            st.rerun()
                with col_remove:
                    # 2.2) Bot√£o de Remo√ß√£o
                    if st.button("üóëÔ∏è", key=f"btn_remove_{i}"):
                        del st.session_state["objetivos_especificos"][i]
                        st.rerun()



    # ---------------------------------------------------------
    # 2) INTRODU√á√ÉO, JUSTIFICATIVA, METODOLOGIA e
    #    DEMAIS INFORMA√á√ïES
    # ---------------------------------------------------------
    # Aba de Introdu√ß√£o
    with tab_intro:
        st.subheader("Introdu√ß√£o")
        st.session_state["introducao"] = st.text_area(
            "Texto de Introdu√ß√£o:",
            value=st.session_state["introducao"],
            height=300
        )

    # Aba de Justificativa
    with tab_justif:
        st.subheader("Justificativa")
        st.session_state["justificativa"] = st.text_area(
            "Texto de Justificativa:",
            value=st.session_state["justificativa"],
            height=300
        )

    # Aba de Metodologia
    with tab_metod:
        st.subheader("Metodologia")
        st.session_state["metodologia"] = st.text_area(
            "Texto de Metodologia:",
            value=st.session_state["metodologia"],
            height=300
        )

    # Aba de Demais Informa√ß√µes
    with tab_demandante:
        st.subheader("Demais Informa√ß√µes")
        st.caption("Edi√ß√£o de Informa√ß√µes do Setor Demandante.")

        # Verifica se os dados existem no session_state, sen√£o busca no banco
        if not st.session_state.get("demais_informacoes"):
            conn = sqlite3.connect(DB_PATH)
            query = """
                SELECT diretoria, coordena√ß√£o_geral, coordena√ß√£o, demandante
                FROM td_dados_resumos_sei
                WHERE id_resumo = ?
                LIMIT 1
            """
            row = conn.execute(query, (nova_iniciativa,)).fetchone()
            conn.close()

            if row:
                st.session_state["demais_informacoes"] = {
                    "diretoria": row[0] or "",
                    "coordenacao_geral": row[1] or "",
                    "coordenacao": row[2] or "",
                    "demandante": row[3] or ""
                }
            else:
                st.session_state["demais_informacoes"] = {
                    "diretoria": "",
                    "coordenacao_geral": "",
                    "coordenacao": "",
                    "demandante": ""
                }

        # Garante que "demais_informacoes" √© um dicion√°rio v√°lido
        if not isinstance(st.session_state["demais_informacoes"], dict):
            try:
                st.session_state["demais_informacoes"] = json.loads(st.session_state["demais_informacoes"])
            except:
                st.session_state["demais_informacoes"] = {}

        # L√™ os valores do session_state (garantindo que n√£o sejam None)
        di = st.session_state["demais_informacoes"].get("diretoria", "")
        cg = st.session_state["demais_informacoes"].get("coordenacao_geral", "")
        co = st.session_state["demais_informacoes"].get("coordenacao", "")
        dm = st.session_state["demais_informacoes"].get("demandante", "")

        st.caption("Preencha os campos abaixo conforme necess√°rio:")
        diretoria_novo    = st.text_input("Diretoria:", value=di)
        coord_geral_novo  = st.text_input("Coordena√ß√£o Geral:", value=cg)
        coord_novo        = st.text_input("Coordena√ß√£o:", value=co)
        demandante_novo   = st.text_input("Demandante (Sigla):", value=dm, disabled=True)

        # Atualiza session_state quando os valores forem alterados
        if st.button("Salvar Informa√ß√µes do Demandante"):
            st.session_state["demais_informacoes"] = {
                "diretoria": diretoria_novo,
                "coordenacao_geral": coord_geral_novo,
                "coordenacao": coord_novo,
                "demandante": demandante_novo
            }
            st.success("Informa√ß√µes do demandante atualizadas com sucesso!")



    with tab_eixos:
        # -------------------------------------------
        # 4) EIXOS TEM√ÅTICOS - Sele√ß√£o de A√ß√µes
        # -------------------------------------------
        st.subheader("Eixos Tem√°ticos")

        eixos_opcoes = get_options_from_table("td_samge_processos", "id_p", "nome")

        # Novo eixo para adicionar
        novo_eixo_id = st.selectbox(
            "Escolha um Eixo (Processo SAMGe) para adicionar:",
            options=[None] + sorted(eixos_opcoes.keys(), key=lambda x: eixos_opcoes[x]),
            format_func=lambda x: eixos_opcoes.get(x, "Selecione..."),
            key="sel_novo_eixo"
        )

       # Adicionar um novo eixo
        if st.button("‚ûï Adicionar Eixo Tem√°tico", key="btn_add_eixo"):
            if novo_eixo_id is None:
                st.warning("Selecione um eixo v√°lido antes de adicionar.")
            else:
                eixo_id_int = int(novo_eixo_id)
                ids_existentes = [int(e["id_eixo"]) for e in st.session_state["eixos_tematicos"]]
                if eixo_id_int not in ids_existentes:
                    novo_eixo = {
                        "id_eixo": eixo_id_int,
                        "nome_eixo": eixos_opcoes.get(str(novo_eixo_id), "Novo Eixo"),
                        "acoes_manejo": {}
                    }
                    st.session_state["eixos_tematicos"].append(novo_eixo)

                    # ‚úÖ For√ßa atualiza√ß√£o dos insumos ao adicionar novo eixo
                    st.session_state["insumos"] = {}  # Reseta os insumos para recalcular

                    st.rerun()
                else:
                    st.info("Este eixo j√° est√° na lista.")



        # Exibir expanders para cada eixo adicionado
        for i, eixo in enumerate(st.session_state["eixos_tematicos"]):
            with st.expander(f"üìå {eixo['nome_eixo']}", expanded=False):
                # Carregar a√ß√µes dispon√≠veis
                acoes_dict = get_options_from_table(
                    "td_samge_acoes_manejo", "id_ac", "nome",
                    filter_col="processo_id", filter_val=eixo["id_eixo"]
                )

                # Criar DataFrame para edi√ß√£o
                acoes_df = pd.DataFrame([
                    {"ID": ac_id, "A√ß√£o": nome, "Selecionado": ac_id in eixo.get("acoes_manejo", {})}
                    for ac_id, nome in acoes_dict.items()
                ])
                if "Selecionado" not in acoes_df.columns:
                    acoes_df["Selecionado"] = False

                with st.form(f"form_acoes_{i}"):
                    edited_acoes = st.data_editor(
                        acoes_df,
                        column_config={
                            "ID": st.column_config.TextColumn(disabled=True),
                            "A√ß√£o": st.column_config.TextColumn(disabled=True),
                            "Selecionado": st.column_config.CheckboxColumn("Selecionar")
                        },
                        hide_index=True,
                        use_container_width=True,
                        key=f"editor_acoes_{i}"
                    )

                    if st.form_submit_button("Salvar A√ß√µes"):
                        # Atualiza as a√ß√µes selecionadas no eixo
                        selecionadas = edited_acoes.loc[edited_acoes["Selecionado"], "ID"].tolist()
                        eixo["acoes_manejo"] = {ac_id: {"insumos": []} for ac_id in selecionadas}
                        st.session_state["eixos_tematicos"][i] = eixo
                        st.success("A√ß√µes atualizadas!")

                # Bot√£o para excluir eixo
                if st.button("üóëÔ∏è Excluir Eixo", key=f"btn_del_{i}"):
                    del st.session_state["eixos_tematicos"][i]
                    st.rerun()

    # -------------------------------------------
    # 5) INSUMOS - Sele√ß√£o de Insumos por A√ß√£o
    # -------------------------------------------
    with tab_insumos:
        st.subheader("Insumos por A√ß√£o")

        for i, eixo in enumerate(st.session_state["eixos_tematicos"]):
            with st.expander(f"üìå {eixo['nome_eixo']}", expanded=False):
                # Percorremos as a√ß√µes daquele eixo
                for ac_id, ac_data in eixo["acoes_manejo"].items():
                    st.markdown(
                        f"### A√ß√£o: {get_options_from_table('td_samge_acoes_manejo', 'id_ac', 'nome').get(ac_id, 'A√ß√£o Desconhecida')}"
                    )

                    # 1) Carregar insumos dispon√≠veis do banco
                    conn = sqlite3.connect(DB_PATH)
                    df_insumos_all = pd.read_sql_query(
                        "SELECT id, descricao_insumo FROM td_insumos",
                        conn
                    )
                    conn.close()

                    # 2) Renomear colunas internamente para "ID" e "Insumo"
                    #    (Assim evitamos o KeyError e podemos usar "ID" diretamente)
                    df_combo = df_insumos_all.rename(
                        columns={
                            "id": "ID",
                            "descricao_insumo": "Insumo"
                        }
                    )

                    # 3) Marcar quais insumos j√° est√£o selecionados
                    sel_ids = set(ac_data.get("insumos", []))
                    df_combo["Selecionado"] = df_combo["ID"].apply(lambda x: x in sel_ids)

                    # 4) Exibir Data Editor num formul√°rio
                    with st.form(f"form_insumos_{i}_{ac_id}"):
                        # Podemos configurar filtros nas colunas usando 'filter="text"' ou True
                        edited_ins = st.data_editor(
                            df_combo,
                            column_config={
                                "ID": st.column_config.TextColumn("C√≥d. Insumo", disabled=True),  # removemos `filter=...`
                                "Insumo": st.column_config.TextColumn("Descri√ß√£o do Insumo", disabled=True),
                                "Selecionado": st.column_config.CheckboxColumn("Selecionar")       # removemos `filter=True`
                            },
                            hide_index=True,
                            use_container_width=True,
                            key=f"editor_ins_{i}_{ac_id}"
                        )

                        # 5) Salvamos insumos selecionados ao clicar
                        if st.form_submit_button("Salvar Insumos"):
                            # Agora "ID" de fato existe no DF
                            selecionados = edited_ins.loc[edited_ins["Selecionado"], "ID"].tolist()
                            ac_data["insumos"] = selecionados
                            st.success("Insumos atualizados!")


    # -------------------------------------------
    # 6) UNIDADES DE CONSERVA√á√ÉO - Distribui√ß√£o de Recursos
    # -------------------------------------------
    with tab_uc:
        st.subheader("Distribui√ß√£o de Recursos por Eixo")

        # Conectar ao banco e buscar os dados corretos da tabela tf_cadastros_iniciativas
        conn = sqlite3.connect(DB_PATH)
        query = """
            SELECT 
                "Unidade de Conserva√ß√£o" AS Unidade,
                "A√á√ÉO DE APLICA√á√ÉO" AS Acao,
                "VALOR TOTAL ALOCADO" AS "Valor Alocado"
            FROM tf_cadastros_iniciativas
            WHERE id_iniciativa = ?
            AND "VALOR TOTAL ALOCADO" > 0
        """
        df_unidades = pd.read_sql_query(query, conn, params=[nova_iniciativa])
        conn.close()

        if df_unidades.empty:
            st.warning("Nenhuma unidade de conserva√ß√£o encontrada para esta iniciativa.")
        else:
            # Define as colunas fixas iniciais
            colunas_fixas = ["Unidade", "Acao", "Valor Alocado"]

            # Ordena as colunas para garantir que os eixos apare√ßam na sequ√™ncia correta
            colunas_eixos = [eixo["nome_eixo"] for eixo in st.session_state["eixos_tematicos"]]
            colunas_ordenadas = colunas_fixas + colunas_eixos + ["Saldo"]

            # Inicializa session_state para armazenar os valores editados
            if "df_uc_editado" not in st.session_state:
                st.session_state["df_uc_editado"] = df_unidades.copy()

            df_editavel = st.session_state["df_uc_editado"]

            # Verifica se a coluna 'Valor Alocado' existe no DataFrame
            if "Valor Alocado" in df_editavel.columns:
                # Filtrar linhas com valores alocados > 0
                df_editavel = df_editavel[df_editavel["Valor Alocado"] > 0]
            else:
                st.warning("A coluna 'Valor Alocado' n√£o foi encontrada no DataFrame.")

            # Criar colunas din√¢micas para cada eixo adicionado
            for eixo in st.session_state["eixos_tematicos"]:
                eixo_nome = eixo["nome_eixo"]
                if eixo_nome not in df_editavel.columns:
                    df_editavel[eixo_nome] = 0  # Inicializa com zero

            # Verifica se a coluna 'Valor Alocado' existe no DataFrame
            if "Valor Alocado" in df_editavel.columns:
                # Criar coluna de saldo (inicialmente igual ao valor alocado)
                df_editavel["Saldo"] = df_editavel["Valor Alocado"] - df_editavel[
                    [eixo["nome_eixo"] for eixo in st.session_state["eixos_tematicos"]]
                ].sum(axis=1)
            else:
                st.warning("A coluna 'Valor Alocado' n√£o foi encontrada no DataFrame.")

            # Verifica se as colunas fixas existem no DataFrame antes de reordenar
            for col in colunas_fixas + ["Saldo"]:
                if col not in df_editavel.columns:
                    df_editavel[col] = 0  # Inicializa com zero se n√£o existir

            # Reordena as colunas no DataFrame antes de exibir no `data_editor`
            df_editavel = df_editavel[colunas_ordenadas]

            # Criar um formul√°rio para o bot√£o "Verificar Saldos"
            with st.form("form_uc"):
                edited_df = st.data_editor(
                    df_editavel,
                    column_config={
                        "Unidade": st.column_config.TextColumn(disabled=True),
                        "Acao": st.column_config.TextColumn("A√ß√£o de Aplica√ß√£o", disabled=True),
                        "Valor Alocado": st.column_config.NumberColumn(disabled=True),
                        "Saldo": st.column_config.NumberColumn("Saldo", disabled=True)
                    },
                    use_container_width=True,
                    key="editor_uc",
                    hide_index=True,
                )

                # Bot√£o para verificar os saldos dentro do formul√°rio
                if st.form_submit_button("Verificar Saldos"):
                    for eixo in st.session_state["eixos_tematicos"]:
                        eixo_nome = eixo["nome_eixo"]
                        if eixo_nome in edited_df.columns:
                            df_editavel[eixo_nome] = edited_df[eixo_nome]  # Atualiza valores por eixo

                    # Recalcula saldo por unidade
                    df_editavel["Saldo"] = df_editavel["Valor Alocado"] - df_editavel[
                        [eixo["nome_eixo"] for eixo in st.session_state["eixos_tematicos"]]
                    ].sum(axis=1)

                    # Atualiza session state com os novos valores
                    st.session_state["df_uc_editado"] = df_editavel.copy()

                    st.success("Distribui√ß√£o de recursos atualizada!")



    # bot√£o do form para salvar os dados editados na sess√£o
    if st.form_submit_button("Salvar Altera√ß√µes"):


        # Verifica√ß√£o pr√©via antes de salvar
        if not st.session_state["objetivo_geral"]:
            st.error("O campo 'Objetivo Geral' n√£o pode estar vazio.")
        elif not st.session_state["objetivos_especificos"]:
            st.error("A lista de 'Objetivos Espec√≠ficos' n√£o pode estar vazia.")
        elif not st.session_state["introducao"]:
            st.error("O campo 'Introdu√ß√£o' n√£o pode estar vazio.")
        elif not st.session_state["justificativa"]:
            st.error("O campo 'Justificativa' n√£o pode estar vazio.")
        elif not st.session_state["metodologia"]:
            st.error("O campo 'Metodologia' n√£o pode estar vazio.")
        else:
            # salvar objetivos geral e espec√≠ficos
            st.session_state["objetivo_geral"] = st.session_state["objetivo_geral"]


            # salvar textos
            st.session_state["introducao"] = st.session_state["introducao"]
            st.session_state["justificativa"] = st.session_state["justificativa"]
            st.session_state["metodologia"] = st.session_state["metodologia"]

            # salvar demais informa√ß√µes
            st.session_state["demais_informacoes"] = {
            "diretoria": diretoria_novo,
            "coordenacao_geral": coord_geral_novo,
            "coordenacao": coord_novo,
            "demandante": demandante_novo
            }

            # salvar eixos tem√°ticos
            st.session_state["eixos_tematicos"] = st.session_state["eixos_tematicos"]

            # salvar insumos
            if "insumos" not in st.session_state:
                st.session_state["insumos"] = {}
            else:
                st.session_state["insumos"] = st.session_state["insumos"]

            # salvar unidades de conserva√ß√£o
            st.session_state["df_uc_editado"] = st.session_state["df_uc_editado"]

            st.success("Altera√ß√µes salvas com sucesso!")

        st.success("Altera√ß√µes salvas com sucesso!")


# -------------------------------------------
# BOT√ÉO FINAL PARA SALVAR CADASTRO
# -------------------------------------------
st.divider()
col1, col2, col3 = st.columns(3)
with col2:
    if st.button("üìù Finalizar Cadastro", key="btn_salvar_geral"):
        salvar_dados_iniciativa(
            id_iniciativa=nova_iniciativa,
            usuario=cpf_usuario,
            objetivo_geral=st.session_state["objetivo_geral"],
            objetivos_especificos=st.session_state["objetivos_especificos"],
            eixos_tematicos=st.session_state["eixos_tematicos"],
            introducao=st.session_state["introducao"],
            justificativa=st.session_state["justificativa"],
            metodologia=st.session_state["metodologia"],
            demais_informacoes=st.session_state["demais_informacoes"]
        )
        st.success("‚úÖ Cadastro atualizado com sucesso!")





st.divider()
st.caption("‚ÑπÔ∏è Informa√ß√µes Originais do Resumo Executivo de Iniciativas", help="ref.: documentos SEI")

# 1) Exibe resumos do SETOR
def tratar_valor(valor):
    if pd.isna(valor) or valor is None or str(valor).strip().lower() == "null":
        return "(sem informa√ß√£o)"
    return str(valor).strip()

resumos = carregar_resumo_iniciativa(setor)
if resumos is not None:
    for _, r in resumos.iterrows():
        nome_inic = tratar_valor(r.get("iniciativa", "Iniciativa Desconhecida"))
        with st.expander(f"üìñ {nome_inic}", expanded=False):
            st.divider()
            st.write(f"**üéØ Objetivo Geral:** {tratar_valor(r.get('objetivo_geral'))}")
            st.divider()
            st.write(f"**üè¢ Diretoria:** {tratar_valor(r.get('diretoria'))}")
            st.write(f"**üìå Coordena√ß√£o Geral:** {tratar_valor(r.get('coordena√ß√£o_geral'))}")
            st.write(f"**üóÇ Coordena√ß√£o:** {tratar_valor(r.get('coordena√ß√£o'))}")
            st.write(f"**üìç Demandante:** {tratar_valor(r.get('demandante'))}")
            st.divider()
            st.write(f"**üìù Introdu√ß√£o:** {tratar_valor(r.get('introdu√ß√£o'))}")
            st.divider()
            st.write(f"**üí° Justificativa:** {tratar_valor(r.get('justificativa'))}")
            st.divider()
            st.write(f"**üèû Unidades de Conserva√ß√£o / Benef√≠cios:** {tratar_valor(r.get('unidades_de_conserva√ß√£o_beneficiadas'))}")
            st.divider()
            st.write(f"**üî¨ Metodologia:** {tratar_valor(r.get('metodologia'))}")

st.divider()